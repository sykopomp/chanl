The following symbols are exported from the csp package:

spawn (&rest forms)

	Macro. Creates a new thread to run forms (an implicit progn),
	concurrently with the current thread. Values of the dynamic variables named in
	*dynamic-variables* will be inherited by the new thread (see
	inherit and add-inherit). Returns a handle for the new thread, 

chan (&optional buffer-size)

	Function. Creates a new communication channel.
	The number of items buffered by the channel is given by n
	(default 0, meaning that communicating threads rendezvous
	at the moment of communication). Returns the new channel.

recv (chan)
	Function. Receives a value from chan. If the channel is empty,
	this will block until a thread tries to send a value on it.
	If several threads are blocked sending, one will be chosen non-deterministically.
	Returns the value received.

send (chan value)
	Function. Send value down chan, blocking if the channel is full and
	there is no thread waiting to receive on it. Returns value.

kill (thread)
	Function. Destroy thread (a handle as returned from spawn).
	This is done by arranging for thread to raise a
	terminate condition (which is handled and ignored at the
	lowest level of each thread).

Unavailable right now:
mux (&body body)
	Macro. Wait for any of a set of communication events to occur,
	and execute associated code.
	The syntax is:

		mux ((op) form*)*
		op ::= (? chan [lambda-list]) | (! chan value) | :*

	where
		chan -- a form, evaluated once to produce a channel;
		lambda-list -- a destructuring lambda list or a variable name
		value -- a form, evaluated once to produce a value.
		forms -- an implicit progn.
	
	Each clause in the alt (except the :* form) represents a channel
	operation; ! names a send operation; ? names a receive operation.
	Alt selects (non deterministically) a clause that is currently
	executable. If none is found and there is a :* clause, then its
	forms will be evaluated, otherwise the alt blocks until a clause
	becomes ready, whereupon its associated forms are evaluated.
	For a receive (?) clause, the value received on the channel is
	bound to the values in lambda-list as for destructuring-bind
	(except that a single atomic variable name is given, it will
	be bound to the entire received value).
	If no lambda-list is given, the value will be ignored.
	Alt returns the value of the last form executed.

